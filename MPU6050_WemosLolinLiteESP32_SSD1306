// Wemos Lolin Lite ESP32 board with MPU 6050 IMU with SSD1306 OLED display
// This code draws on numerous example implementations to adapt to Wemos Lolin Lite ESP32
// #TODOs include:
// 1. Further research on noise reduction in Peak Ground Acceleration and potential inclusion of Gyro
// 2. Normalisation / error / bias removal from MPU 6050 readout
// 3. Inaccuracy of temperature readouts
// 4. OLED display graph implementation
// 5. WiFi setup with AP connect for address and password management
// 6. Google sheets archiving of results

#include "Wire.h" // This library allows you to communicate with I2C devices.  
#include "Adafruit_MPU6050.h"
#include "Adafruit_SSD1306.h" //https://startingelectronics.org/tutorials/arduino/modules/OLED-128x64-I2C-display/ update #define in Adafruit_SSD1306 to match LCD dimensions
#include "SPI.h"
#include "Adafruit_GFX.h"

#define minval -5
#define maxval 3

Adafruit_MPU6050 mpu;

// OLED display https://forum.arduino.cc/t/solved-how-to-connect-multiple-i2c-devices/565312/3
// OLED Chart example - https://github.com/elC0mpa/OLED_SSD1306_Chart/blob/master/examples/SinglePlotMode/SinglePlotMode.ino 

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define OLED_RESET   0

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// End OLED display

#define I2C_SDA 23
#define I2C_SCL 22

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.  
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data  
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data  
int16_t temperature; // variables for temperature data  
const int MPU = I2C_SDA;
int16_t pitch, roll, yaw;

int c = 0;

// Calibration
//float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float RateCalibrationAccX, RateCalibrationAccY, RateCalibrationAccZ;
int RateCalibrationNumber; 
float accelerationx, accelerationy, accelerationz;


float pga; // Peak Ground Acceleration https://en.wikipedia.org/wiki/Peak_ground_acceleration
float maxpga = 0.0; 
char tmp_str[7]; // temporary variable used in convert function  
char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.  
sprintf(tmp_str, "%6d", i);  
return tmp_str;  
} 

void setup() {  
  Serial.begin(115200);  
  Wire.begin(I2C_SDA, I2C_SCL);  
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)  
  Wire.write(0x6B); // PWR_MGMT_1 register  
  Wire.write(0); // set to zero (wakes up the MPU-6050)  
  Wire.endTransmission(true);
   
  //Adafruit MPU
  while (!Serial) {
    delay(10); // will pause Zero, Leonardo, etc until serial console opens
  }

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  //calculate_IMU_error(); 

  mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
  mpu.setGyroRange(MPU6050_RANGE_250_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  mpu.setMotionDetectionThreshold(3);
  Serial.println("");
  delay(100);
  //End Adafruit MPU

  // OLED setup
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.fillScreen(BLACK);
  display.setTextColor(WHITE);
  display.setTextWrap(false); 
  display.ssd1306_command(SSD1306_DISPLAYOFF);
  delay(5000);
  display.ssd1306_command(SSD1306_DISPLAYON);
  display.println("Earthquake Detector");
  display.println("");
  display.println("Wemos Lolin Lite ESP32");
  display.println("MPU6050 temp/gyro/acc");
  display.println("SSD1306 OLED display");
  display.println("");
  display.println("by Simon Oliver");
  display.display();
  delay(5000);
  // End OLED setup

  // Calibrate accelerometer and gyrop
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  for(RateCalibrationNumber=0;
      RateCalibrationNumber<2000;
      RateCalibrationNumber++) {
        RateCalibrationAccX+=a.acceleration.x;
        RateCalibrationAccY+=a.acceleration.y;
        RateCalibrationAccZ+=a.acceleration.z;
      }
  RateCalibrationAccX/=2000;
  RateCalibrationAccY/=2000;
  RateCalibrationAccZ/=2000;
  Serial.println(RateCalibrationAccX);
  Serial.println(RateCalibrationAccY);
  Serial.println(RateCalibrationAccZ);

}  
void loop() {  
  // Adafruit MPU6050
  /* Get new sensor events with the readings */
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);


  accelerationx = a.acceleration.x-RateCalibrationAccX;
  accelerationy = a.acceleration.y-RateCalibrationAccY;
  accelerationz = a.acceleration.z-RateCalibrationAccZ;

  /* Print out the values */
  Serial.print(accelerationx);
  Serial.print(",");
  Serial.print(accelerationy);
  Serial.print(",");
  Serial.print(accelerationz);
  Serial.print(", ");
  Serial.print(g.gyro.x);
  Serial.print(",");
  Serial.print(g.gyro.y);
  Serial.print(",");
  Serial.print(g.gyro.z);
  Serial.println("");  
  delay(10); 

  display.clearDisplay();
  display.setCursor(0, 0);

  Serial.print("Accelerometer ");
  Serial.print("X: ");
  Serial.print(accelerationx, 1);
  Serial.print(" m/s^2, ");
  Serial.print("Y: ");
  Serial.print(accelerationy, 1);
  Serial.print(" m/s^2, ");
  Serial.print("Z: ");
  Serial.print(accelerationz, 1);
  Serial.println(" m/s^2");

  display.println("Accelerometer - m/s^2");
  display.print(accelerationx, 1);
  display.print(", ");
  display.print(accelerationy, 1);
  display.print(", ");
  display.print(accelerationz, 1);
  display.println("");

  Serial.print("Gyroscope ");
  Serial.print("X: ");
  Serial.print(g.gyro.x, 1);
  Serial.print(" rps, ");
  Serial.print("Y: ");
  Serial.print(g.gyro.y, 1);
  Serial.print(" rps, ");
  Serial.print("Z: ");
  Serial.print(g.gyro.z, 1);
  Serial.println(" rps");

  display.println("Gyroscope - rps");
  display.print(g.gyro.x, 1);
  display.print(", ");
  display.print(g.gyro.y, 1);
  display.print(", ");
  display.print(g.gyro.z, 1);
  display.println("");

  display.println("Temperature - C");
  display.print(temp.temperature, 2);
  display.println("");
  // Peak Ground Acceleration looks like a good alternative to specific motion direction and acceleration
  pga = sqrt(accelerationx * accelerationx + accelerationy * accelerationy + accelerationz * accelerationz)*1; // Scale factor
  if(pga >= maxpga){
    maxpga = pga;
    }
  // Correlation with the Mercalli scale - https://en.wikipedia.org/wiki/Peak_ground_acceleration
  // ------------------------------------------------------------------------------------------------------
  // Instrumental Intensity |  Acceleration(g)	 | Velocity(cm/s)| Perceived shaking	| Potential damage  |
  // ------------------------------------------------------------------------------------------------------
  //     I                  | < 0.000464	       | < 0.0215	     | Not felt 	        | None              |
  //   II–III	              | 0.000464 – 0.00297 | 0.135 – 1.41  | Weak	              | None              |
  //   IV	                  | 0.00297 – 0.0276	 | 1.41 – 4.65	 | Light	            | None              |
  //   V	                  | 0.0276 – 0.115	   | 4.65 – 9.64	 | Moderate	          | Very light        |
  //   VI	                  | 0.115 – 0.215	     | 9.64 – 20	   | Strong	            | Light             |
  //   VII                  | 0.215 – 0.401	     | 20 – 41.4     | Very strong	      | Moderate          |
  //   VIII	                | 0.401 – 0.747	     | 41.4 – 85.8   | Severe	            | Moderate to heavy |
  //   IX	                  | 0.747 – 1.39	     | 85.8 – 178	   | Violent	          | Heavy             |
  //   X+	                  |    > 1.39	         | > 178	       | Extreme	          | Very heavy        |
  // ------------------------------------------------------------------------------------------------------
  display.println("PGA - m/s^2");
  display.print(pga, 5);
  display.println("");
  
  display.display();
  // End Adafruit MPU6050
  
  /*
  
  Wire.beginTransmission(MPU_ADDR);  
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]  
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.  
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable  
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)  
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)  
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)  
  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)  
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)  
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)  
  gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)  
  // print out data  

  // Pitch angle should be the angle between X and Z axis which will be
  pitch = atan2(accelerometer_z,accelerometer_x)*180/PI;
  //for Roll angle should be the angle between Y and Z axis which will be
  roll = atan2(accelerometer_z,accelerometer_y)*180/PI;
  //And to find yaw it should be the angle between X and VectorY+Z which will be
  yaw = atan2(sqrt(accelerometer_y*accelerometer_y+accelerometer_z*accelerometer_z),accelerometer_x)*180/PI;

  Serial.print("aX = "); Serial.print(convert_int16_to_str(accelerometer_x));  
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(accelerometer_y));  
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(accelerometer_z));  
  // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]  
  Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);  
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));  
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));  
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));  

  Serial.print(" | roll = "); Serial.print(convert_int16_to_str(roll));
  Serial.print(" | pitch = "); Serial.print(convert_int16_to_str(pitch));
  Serial.print(" | yaw = "); Serial.print(convert_int16_to_str(yaw));

  Serial.println();  
  // delay  
  delay(10);  
  
  // OLED test
  display.stopscroll();
  display.fillScreen(BLACK);
  display.invertDisplay(0);

  display.clearDisplay();

  display.setTextSize(1); // Draw 1X-scale text
  display.setTextColor(WHITE);
  display.setCursor(0, 1);
  display.print(F("Temp: "));
  display.setTextSize(2); // Draw 2X-scale text
  display.print(F(convert_int16_to_str(temperature/340.00+36.53)));

  display.setTextSize(1); 
  display.setCursor(0, 4);
  display.println(F(""));
  display.println(F(""));
  display.print(F("Roll: "));
  display.setTextSize(2); // Draw 2X-scale text
  //display.print(F(convert_int16_to_str(roll)));
  display.print(a.acceleration.x);

  display.setTextSize(1); 
  display.setCursor(0, 20);
  display.println(F(""));
  display.println(F(""));
  display.print(F("Pitch: "));
  display.setTextSize(2); // Draw 2X-scale text
  display.print(F(convert_int16_to_str(pitch)));

  display.display();      // Show initial text
 
  // End OLED test
  */
} 
/*void calculate_IMU_error() {
  // We can call this function in the setup section to calculate the accelerometer and gyro data error. From here we will get the error values used in the above equations printed on the Serial Monitor.
  // Note that we should place the IMU flat in order to get the proper values, so that we then can the correct values
  // Read accelerometer values 200 times
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);

    accelerometer_x = a.acceleration.x;
    accelerometer_y = a.acceleration.y;
    accelerometer_z = a.acceleration.z;

    //accelerometer_x = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    //accelerometer_y = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    //accelerometer_z = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    // Sum all readings
    AccErrorX = AccErrorX + ((atan((accelerometer_y) / sqrt(pow((accelerometer_x), 2) + pow((accelerometer_z), 2))) * 180 / PI));
    AccErrorY = AccErrorY + ((atan(-1 * (accelerometer_x) / sqrt(pow((accelerometer_y), 2) + pow((accelerometer_z), 2))) * 180 / PI));
    c++;
  }
   //Divide the sum by 200 to get the error value
  AccErrorX = AccErrorX / 200;
  AccErrorY = AccErrorY / 200;
  c = 0;
  // Read gyro values 200 times
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    
    GyroErrorX = GyroErrorX + g.gyro.x;
    GyroErrorY = GyroErrorY + g.gyro.y;
    GyroErrorZ = GyroErrorZ + g.gyro.z;

    //GyroX = Wire.read() << 8 | Wire.read();
    //GyroY = Wire.read() << 8 | Wire.read();
    //GyroZ = Wire.read() << 8 | Wire.read();
    // Sum all readings
    //GyroErrorX = GyroErrorX + (gyro_x / 131.0);
    //GyroErrorY = GyroErrorY + (gyro_y / 131.0);
    //GyroErrorZ = GyroErrorZ + (gyro_z / 131.0);
    c++;
  }
  //Divide the sum by 200 to get the error value
  GyroErrorX = GyroErrorX / 200;
  GyroErrorY = GyroErrorY / 200;
  GyroErrorZ = GyroErrorZ / 200;
  // Print the error values on the Serial Monitor
  Serial.print("AccErrorX: ");
  Serial.println(AccErrorX);
  Serial.print("AccErrorY: ");
  Serial.println(AccErrorY);
  Serial.print("GyroErrorX: ");
  Serial.println(GyroErrorX);
  Serial.print("GyroErrorY: ");
  Serial.println(GyroErrorY);
  Serial.print("GyroErrorZ: ");
  Serial.println(GyroErrorZ);
}*/ 
// https://microcontrollerslab.com/earthquake-detector-arduino/
